pipeline {
    agent any

    environment {
       GIT_URL = 'https://github.com/shivashankarbukka402/3tire_app.git'
        GIT_BRANCH = 'main'
        GIT_CREDENTIALS = 'shivashankarbukka402'
        IMAGE_NAME = 'shiva9828/backend'
        IMAGE_TAG = 'latest'
        DOCKERFILE_BASE = 'Dockerfile'
        DOCKER_REGISTRY_CRED_ID = 'docker_token'
        SONAR_HOST_URL='http://65.1.85.151:9000'
    }

     stages {
        stage('CHECKOUT') {
            steps {
                script {
                    git branch: "${env.GIT_BRANCH}",
                     credentialsId: "${env.GIT_CREDENTIALS}",
                      url: "${env.GIT_URL}"
                }
            }
        }
        stage('Sonar Code Quality check') {
            steps {
                script {
                    dir('./backend') {
                        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=backend \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=${env.SONAR_HOST_URL} \
                                  -Dsonar.token=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }
        stage('Docker Build and Push') {
           steps {
               script {
                    dir('Backend') {
                            dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f ${DOCKERFILE_BASE} .")
                            docker.withRegistry('', "${DOCKER_REGISTRY_CRED_ID}") { 
                            dockerImage.push()
                            }
                     }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    // Clean old reports
                    sh 'rm -f trivy_backend.html || true'
                    
                    // Run Trivy using the built-in HTML template
                    sh '''
                        trivy image \
                        --severity HIGH,CRITICAL \
                        --format template \
                        --template "$(trivy conf show --template html)" \
                        --output trivy_backend.html ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Publish Trivy Report') {
            steps {
                // Publish the HTML report in Jenkins
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'trivy_backend.html',
                    reportName: 'Trivy Vulnerability Report'
                ])
            }
        }
    }
}
